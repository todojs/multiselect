{const uuid=()=>"t"+Math.random().toString(32).substr(2),RENDER_INITIAL=Symbol(),RENDER_REFRESH=Symbol(),RENDER_REFRESH_SELECTALL=Symbol(),RECURSIVE_REFRESH=Symbol();class TodojsMultiselect extends HTMLElement{constructor(){super(),this[RECURSIVE_REFRESH]=!1,this.attachShadow({mode:"open"}),new MutationObserver(mutations=>{let refresh=!1,update=!1,change=!1;for(let mutation of mutations)"class"!==mutation.attributeName&&(refresh=!0),"selected"===mutation.attributeName&&(change=!0),"childList"===mutation.type&&(update=!0);refresh&&this[RENDER_REFRESH](),update&&this.dispatchEvent(new Event("update")),change&&this.dispatchEvent(new Event("change"))}).observe(this,{subtree:!0,attributes:!0,attributeFilter:["selected"],childList:!0,characterData:!0}),this[RENDER_INITIAL]()}static get observedAttributes(){return["open","disabled"]}attributeChangedCallback(name,oldValue,newValue){if("disabled"===name)""===newValue?(this.removeAttribute("open"),this.setAttribute("last-tabindex",this.getAttribute("tabindex")),this.removeAttribute("tabindex")):this.setAttribute("tabindex",this.getAttribute("last-tabindex")||"0");else if("open"===name)if(""===newValue)if(this.hasAttribute("disabled"))this.removeAttribute("open");else{this.shadowRoot.querySelectorAll("#checkboxes p.hidden").forEach(p=>{p.classList.remove("hidden")});const search=this.shadowRoot.querySelector("#search");search.value="",search.focus(),this.dispatchEvent(new Event("open"))}else this.dispatchEvent(new Event("close"))}connectedCallback(){this.hasAttribute("disabled")||this.hasAttribute("tabindex")||this.setAttribute("tabindex","0")}get disabled(){return this.hasAttribute("disabled")}set disabled(newValue){newValue?this.setAttribute("disabled","true"):this.removeAttribute("disabled")}get options(){const that=this;return new Proxy([],{get(target,property){if("length"===property)return that.querySelectorAll("option").length;if(property===Symbol.iterator){return[...that.querySelectorAll("option")].map(getOption)[Symbol.iterator]}return"string"==typeof property&&isNaN(parseInt(property))?Reflect.get(target,property):getOption(that.querySelectorAll("option")[property])},set(target,property,value){if("length"===property)return!0;let option=that.querySelectorAll("option")[property],newOption=!1;return option||(option=document.createElement("option"),newOption=!0),option.id=value.id||uuid(),value.value&&(option.value=value.value),option.innerText=value.text||"",value.selected?option.setAttribute("selected","true"):option.removeAttribute("selected"),newOption&&that.appendChild(option),!0},has(target,property){if("symbol"==typeof property||"string"==typeof property&&isNaN(parseInt(property)))return Reflect.has(target,property);return!!that.querySelectorAll("option")[property]},deleteProperty(target,property){const option=that.querySelectorAll("option")[property],element=getOption(option);return option.parentElement.removeChild(option),element}});function getOption(el){return{get id(){return el.id},set id(newId){return el.id=newId},get value(){return el.value},set value(newValue){return el.value=newValue},get text(){return el.innerText||void 0},set text(newText){return el.innerText=newText},get selected(){return el.hasAttribute("selected")},set selected(newSelection){newSelection?el.setAttribute("selected","true"):el.removeAttribute("selected")}}}}set options(values){let child=this.lastElementChild;for(;child;)this.removeChild(child),child=this.lastElementChild;values.forEach(value=>this.options.push(value))}get value(){const that=this;return new Proxy([],{get(target,property){if("length"===property)return that.querySelectorAll("option[selected]").length;if(property===Symbol.iterator){return[...that.querySelectorAll("option[selected]")].map(e=>e.value)[Symbol.iterator]}return"string"==typeof property&&isNaN(parseInt(property))?Reflect.get(target,property):that.querySelectorAll("option[selected]")[property].value},set:(target,property,value)=>"length"===property||(that.querySelector(`option[value="${value}"]`).setAttribute("selected","true"),!0),has:(target,property)=>"symbol"==typeof property||"string"==typeof property&&isNaN(parseInt(property))?Reflect.has(target,property):!!that.querySelectorAll("option[selected]")[property],deleteProperty:(target,property)=>"symbol"==typeof property||"string"==typeof property&&isNaN(parseInt(property))?Reflect.deleteProperty(target,property):(that.querySelectorAll("option[selected]")[property].removeAttribute("selected"),!0)})}set value(values){const options=this.querySelectorAll("option");for(let n=0;n<options.length;n++)-1===values.indexOf(options[n].value)?options[n].removeAttribute("selected"):options[n].setAttribute("selected","true")}open(){this.setAttribute("open","true")}close(){this.removeAttribute("open")}[RENDER_INITIAL](){this.shadowRoot.innerHTML='\n<link rel="stylesheet"\n      href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">\n<style>\n  :host {\n    display            : inline-block;\n    position           : relative;\n    font-family        : Roboto, Arial, sans-serif;\n    width              : 24em;\n    color              : #000;\n    background-color   : #FFF;\n  }\n  :host([disabled]) #selection #selected {\n    background-color   : var(--todojs-disabled-gbcolor, lightgray);\n  }\n  #selection {\n    position           : relative;\n    cursor             : pointer;\n    min-width          : 14em;\n    width              : 100%;\n    height             : 2em;\n    border             : 1px solid lightgray;\n    background-color   : inherit;\n  }\n  #selection #selected {\n    position           : absolute;\n    top                : 0;\n    left               : 0;\n    right              : 0;\n    bottom             : 0;\n    padding            : 0.4em 30px 0.4em 0.4em;\n    white-space        : nowrap;\n    overflow           : hidden;\n    text-overflow      : ellipsis;\n  }\n  #selection #selected:after {\n    position           : absolute;\n    content            : "";\n    top                : calc(1em - 3px);\n    right              : 10px;\n    width              : 0;\n    height             : 0;\n    border-width       : 6px;\n    border-style       : solid;\n    border-color       : #000 transparent transparent transparent;\n  }\n  :host([open]) #selection #selected:after {\n    border-color       : transparent transparent #000 transparent;\n    top                : calc( 1em - 8px);\n  }\n  #dropdown {\n    display            : none;\n    left               : 0;\n    right              : 0;\n    top                : auto;\n    width              : 100%;\n    min-width          : 14em;\n    max-height         : 14em;\n    overflow-x         : hidden;\n    overflow-y         : auto;\n    position           : absolute;\n    background-color   : inherit;\n    border             : solid lightgray;\n    border-width       : 0 1px 1px 1px;\n    z-index            : 20;\n  }\n  :host([open]) #dropdown {\n    display            : block;\n  }\n  #search {\n    position           : absolute;\n    height             : 1.6em;\n    width              : calc( 100% - 36px - 1em);\n    margin-top         : -0.35em;\n    border             : 0;\n    color              : inherit;\n    background-color   : inherit;\n    font-family        : inherit;\n    font-size          : inherit;\n  }\n  #search:focus {\n    outline            : none;\n  }\n  #search::-webkit-input-placeholder,\n  #search::placeholder {\n    color              : inherit;\n    opacity            : 0.4;\n    font-style         : italic;\n  }\n  #dropdown .group {\n    display            : block;\n    position           : relative;\n    height             : 1em;\n    margin             : 0;\n    padding            : 0.5em 2em;\n    font-size          : 1em;\n    -webkit-user-select: none;\n    -moz-user-select   : none;\n    -ms-user-select    : none;\n    user-select        : none;\n   }\n  #dropdown .group.hidden {\n    display            : none;\n  }\n  #dropdown .group .option {\n    position           : absolute;\n    opacity            : 0;\n    cursor             : pointer;\n    height             : 0;\n    width              : 0;\n  }\n  #dropdown .group .mark {\n    cursor             : pointer;\n    position           : absolute;\n    top                : 0.5em;\n    left               : 0.5em;\n    height             : 1em;\n    width              : 1em;\n    background-color   : var(--todojs-mark-bg-color, #eee);\n    z-index            : 20;\n  }\n  #dropdown .group .option:checked ~ .mark {\n    background-color   : var(--todojs-mark-checked-bg-color, #2196F3);\n  }\n  #dropdown .group:hover .option ~ .mark ~ .label {\n    background-color   : var(--todojs-label-hover-bg-color, #eee);\n  }\n  #dropdown .group .option:focus ~ .mark ~ .label {\n    background-color   : var(--todojs-label-focus-bg-color, lightgrey);\n  }\n  #dropdown .group .mark:after {\n    content            : "";\n    position           : absolute;\n    display            : none;\n  }\n  #dropdown .group .option:checked ~ .mark:after {\n    display            : block;\n  }\n  #dropdown .group .mark:after {\n    left               : 0.35em;\n    top                : 0.1em;\n    width              : 0.2em;\n    height             : 0.5em;\n    border-style       : solid;\n    border-color       : var(--todojs-mark-color, white);\n    border-width       : 0 2px 2px 0;\n    -webkit-transform  : rotate(45deg);\n    -ms-transform      : rotate(45deg);\n    transform          : rotate(45deg);\n  }\n  #dropdown .group .label {\n    cursor             : pointer;\n    display            : block;\n    position           : absolute;\n    height             : 1em;\n    top                : 0;\n    left               : 0;\n    right              : 0;\n    padding            : 0.5em 2em;\n  }\n  #dropdown .group.select-all {\n    border-bottom      : 1px dotted darkgray;\n  }\n</style>\n<div id="selection">\n  <div id="selected"></div>\n</div>\n<div id="dropdown">\n  <p class="group select-all">\n    <input type="checkbox" id="selectAll" class="option">\n    <label for="selectAll" class="mark"></label>\n    <input type="search" id="search" placeholder="escribe aquí para filtrar">\n  </p>\n  <div id="checkboxes"></div>\n</div>';const selection=this.shadowRoot.querySelector("#selection"),dropdown=this.shadowRoot.querySelector("#dropdown"),search=this.shadowRoot.querySelector("#search"),checkboxes=this.shadowRoot.querySelector("#checkboxes"),selectAll=this.shadowRoot.querySelector("#selectAll");this.addEventListener("blur",()=>{this.removeAttribute("open")}),this.addEventListener("keydown",evt=>{"Enter"!==evt.key&&"ArrowDown"!==evt.key||this.hasAttribute("open")?"Escape"===evt.key&&this.removeAttribute("open"):this.setAttribute("open","true")}),selection.addEventListener("click",()=>{this.hasAttribute("open")?this.removeAttribute("open"):this.setAttribute("open","true")}),search.addEventListener("keyup",evt=>{if("Enter"===evt.key)return selectAll.click(),evt.preventDefault();filter()}),search.addEventListener("change",filter),search.addEventListener("search",filter);const that=this;function filter(){const paragraphs=checkboxes.querySelectorAll("p"),text=search.value.toLowerCase();for(let n=0;n<paragraphs.length;n++){const p=paragraphs[n];-1===p.innerText.toLowerCase().search(text)?p.classList.add("hidden"):p.classList.remove("hidden")}that[RENDER_REFRESH_SELECTALL]()}dropdown.addEventListener("keydown",evt=>{if("ArrowDown"===evt.key){const focus=dropdown.querySelector("input:focus");if(focus){const next=focus.parentElement.nextElementSibling;next?next.querySelector("input").focus():search.focus()}else dropdown.querySelector("input:nth-of-type(2)").focus();evt.preventDefault()}else if("ArrowUp"===evt.key){const focus=dropdown.querySelector("input:focus");if(focus)if(focus===search)checkboxes.querySelector("p:last-of-type input").focus();else{const previous=focus.parentElement.previousElementSibling;previous?previous.querySelector("input").focus():search.focus()}else checkboxes.querySelector("p:last-of-type input").focus();evt.preventDefault()}else"Enter"===evt.key&&"checkbox"===evt.target.type&&evt.target.click()}),dropdown.addEventListener("click",evt=>{if("checkbox"===evt.target.type){if(this[RECURSIVE_REFRESH]=!0,"selectAll"===evt.target.id){const checked=evt.target.checked;return checkboxes.querySelectorAll("p:not(.hidden) input.option").forEach(i=>{i.checked=checked,checked?this.querySelector(`#${i.id}`).setAttribute("selected","true"):this.querySelector(`#${i.id}`).removeAttribute("selected")}),void(evt.cancelBubble=!0)}evt.target.checked?this.querySelector(`#${evt.target.id}`).setAttribute("selected","true"):this.querySelector(`#${evt.target.id}`).removeAttribute("selected"),evt.cancelBubble=!0}}),this[RENDER_REFRESH]()}[RENDER_REFRESH](){const selected=this.shadowRoot.querySelector("#selected"),options=this.querySelectorAll("option"),checkboxes=this.shadowRoot.querySelector("#checkboxes");let text="";for(let n=0;n<options.length;n++)text+=options[n].hasAttribute("selected")?options[n].innerText+"; ":"";if(selected.innerText=text,this[RECURSIVE_REFRESH])this[RECURSIVE_REFRESH]=!1;else{let child=checkboxes.lastElementChild;for(;child;)checkboxes.removeChild(child),child=checkboxes.lastElementChild;for(let n=0;n<options.length;n++){options[n].id||(options[n].id="t"+Math.random().toString(36).substr(2,9));const paragraphElement=document.createElement("p");paragraphElement.classList.add("group"),paragraphElement.innerHTML=`\n            <input\n              type="checkbox"\n              class="option"\n              id="${options[n].id}"\n              ${options[n].hasAttribute("selected")?"checked":""}\n            >\n            <label class="mark" for="${options[n].id}"></label>\n            <label class="label" for="${options[n].id}">${options[n].text}</label>\n        `,checkboxes.appendChild(paragraphElement)}}this[RENDER_REFRESH_SELECTALL]()}[RENDER_REFRESH_SELECTALL](){const selectAll=this.shadowRoot.querySelector("#selectAll"),checkboxes=this.shadowRoot.querySelector("#checkboxes"),checked=checkboxes.querySelectorAll("p:not(.hidden) input.option:checked").length,visible=checkboxes.querySelectorAll("p:not(.hidden) input.option").length;selectAll.checked=checked===visible&&0!==checked}}customElements.get("todojs-multiselect")||customElements.define("todojs-multiselect",TodojsMultiselect)}